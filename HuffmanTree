#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define N 95
#define L 10000
typedef struct linknod
{
    char data;
    float weight;
    struct linknod* lchild;
    struct linknod* rchild;
    struct linknod* mchild;
    struct linknod* next;
} linknode;
int n=0,j;
typedef struct CodeNod
{
    char  ch;   //字符
    char  bits[L]; //编码
} CodeNode;
void BuildHuffmanTree(linknode *hufft)
{
    linknode *t1,*p,*pr,*q,t;
    while(hufft->next!=NULL)//hufft->next
    {
        pr=hufft;
        while(pr!=NULL)
        {
            q=pr;
            p=pr;
            while(p!=NULL)
            {
                if(p->weight<q->weight)
                {
                    q=p;
                }
                p=p->next;
            }
            t=(*pr);
            (*pr)=(*q);
            (*q)=t;
            t1=pr->next;
            pr->next=q->next;
            q->next=t1;
            pr=pr->next;
        }
        p=hufft;
        pr=(linknode*)malloc(sizeof(linknode));
        pr->data=' ';
        pr->lchild=p;
        pr->mchild=p->next;
        pr->rchild=p->next->next;
        pr->next=p->next->next->next;
        pr->weight=pr->lchild->weight+pr->mchild->weight+pr->rchild->weight;
        hufft=pr;
    }
    return;
}
void Encoding(linknode* p,char buf[],CodeNode cd[],int i)
{
    if(p!=NULL)
    {
        if(p->data!='~')
        {
            cd[j].ch=p->data;
            strcpy(cd[j].bits,buf);
            j++;
        }
        else
        {
            if(p->lchild!=NULL)
            {
                buf[i]='0';
                buf[i+1]='\0';
                Encoding(p->lchild,buf,cd,i+1);
            }
            if(p->mchild!=NULL)
            {
                buf[i]='1';
                buf[i+1]='\0';
                Encoding(p->mchild,buf,cd,i+1);
            }
            if(p->rchild!=NULL)
            {
                buf[i]='2';
                buf[i+1]='\0';
                Encoding(p->rchild,buf,cd,i+1);
            }
        }
    }
    if(j==n-1)
    return;
    i--;
    buf[i+1]='\0';

}
int main()
{
    int i,sumw=0;
    linknode *hufft,*t1,*p,*pr,*q,t;
    CodeNode cd[N];
    char ch,buf[L];
    FILE *fp;
    p=hufft=(linknode*)malloc(sizeof(linknode));
    if((fp=fopen("E:\\Software design\\Huffman\\article.txt","r"))==NULL)
    {
        printf("Fail to open the text\n");
        exit(0);
    }
    p=hufft=(linknode*)malloc(sizeof(linknode));
    p->next=NULL;
    while((ch=fgetc(fp))!=EOF)
    {
        if(ch>31&&ch<127)
        {
        p=hufft;
        while(p->next!=NULL)
        {
            if(p->data==ch)
            break;
            p=p->next;
        }
        if(p->next==NULL)
        {
            n++;
            p->data=ch;
            p->lchild=p->mchild=p->rchild=NULL;
            pr=p;
            p->weight=1;
            p=p->next=(linknode*)malloc(sizeof(linknode));
            p->next=NULL;
        }
        else
        {
            p->weight++;
        }}
    }
    fclose(fp);
    pr->next=NULL;
    //free(p);
    p=hufft;
    while(p!=NULL)
    {
        sumw+=p->weight;
        p=p->next;
    }
    //新建哈夫曼树
    while(hufft->next!=NULL&&hufft->weight!=sumw)//hufft->next
    {
        pr=hufft;
        while(pr!=NULL)
        {
            q=pr;
            p=pr;
            while(p!=NULL)
            {
                if(p->weight<q->weight)
                {
                    q=p;
                }
                p=p->next;
            }
            t=(*pr);
            (*pr)=(*q);
            (*q)=t;
            t1=pr->next;
            pr->next=q->next;
            q->next=t1;
            pr=pr->next;
        }
        if(hufft->weight==sumw)
            break;
        p=hufft;
        pr=(linknode*)malloc(sizeof(linknode));
        pr->data='~';
        pr->lchild=pr->mchild=pr->rchild=NULL;
        pr->lchild=p;
        pr->mchild=p->next;
        if(p->next->next!=NULL)
        {
            pr->rchild=p->next->next;
            pr->next=p->next->next->next;
            pr->weight=pr->lchild->weight+pr->mchild->weight+pr->rchild->weight;
        }
        else
            pr->weight=pr->lchild->weight+pr->mchild->weight;
        hufft=pr;
    }
    Encoding(hufft,buf,cd,0);
    for(i=0;i<n;i++)
    {
        printf("%c %s\n",cd[i].ch,cd[i].bits);
    }
    return 0;
}
